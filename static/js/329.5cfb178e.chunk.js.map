{"version":3,"file":"static/js/329.5cfb178e.chunk.js","mappings":"gMAEaA,E,QAAeC,GAAAA,IAAH,4H,SCCZC,EAAS,WACpB,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,UAAU,oBACVC,OAAO,KACPC,MAAM,KACNC,OAAO,KACPC,MAAM,c,iMCTRC,E,MAAWC,GAAAA,OAAa,CAC5BC,OAAQ,MACRC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAgB,mCAAG,oGACPN,EAAS,uBADF,cACxBO,EADwB,yBAEvBA,EAASC,KAAKC,SAFS,2CAAH,qDAKhBC,EAAY,mCAAG,WAAMC,GAAN,uFACHX,EAAS,UAAD,OAAWW,IADhB,cACpBJ,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKZI,EAAO,mCAAG,WAAMD,GAAN,uFACEX,EAAS,UAAD,OAAWW,EAAX,aADV,cACfJ,EADe,yBAEdA,EAASC,KAAKK,MAFA,2CAAH,sDAKPC,EAAU,mCAAG,WAAMH,GAAN,uFACDX,EAAS,UAAD,OAAWW,EAAX,aADP,cAClBJ,EADkB,yBAEjBA,EAASC,KAAKC,SAFG,2CAAH,sDAKVM,EAAc,mCAAG,WAAMC,GAAN,uFACLhB,EAAS,uBAAD,OAAwBgB,IAD3B,cACtBT,EADsB,yBAErBA,EAASC,KAAKC,SAFO,2CAAH,uD,0KC5BdQ,EAAUxB,EAAAA,GAAAA,IAAH,gHAOPyB,EAAOzB,EAAAA,GAAAA,GAAH,+JASJ0B,EAAO1B,EAAAA,GAAAA,GAAH,+ZAkBJ2B,EAAO3B,EAAAA,GAAAA,EAAH,oHAOJ4B,EAAM5B,EAAAA,GAAAA,IAAH,+EAMH6B,EAAY7B,EAAAA,GAAAA,EAAH,6I,SC9CT8B,EAAO,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrB,OACE,SAACP,EAAD,WACE,SAACC,EAAD,UACGM,EAAOC,KAAI,gBAAGd,EAAH,EAAGA,GAAIe,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACV,UAACT,EAAD,YACE,SAACE,EAAD,CACEQ,IACEF,EAAY,0CAC2BA,GACnC,oHAENG,IAAKJ,KAEP,SAACN,EAAD,UAAOM,KACP,SAACJ,EAAD,UAAYM,MAVHjB,WC6BrB,EA7BiB,WACf,IAAQoB,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,MAArC,eAAOT,EAAP,KAAeY,EAAf,KACA,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOI,EAAP,KAAcC,EAAd,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACRJ,GAAW,IACXvB,EAAAA,EAAAA,IAAQmB,GACLS,MAAK,SAAA/B,GACJ,GAAuB,IAAnBA,EAAQgC,OACV,OAAOC,EAAAA,GAAAA,MAAY,2BAErBN,EAAU3B,MAEXkC,OAAM,SAAAN,GAAK,OAAIC,EAASD,EAAMO,YAC9BC,SAAQ,kBAAMV,GAAW,QAC3B,CAACJ,KAGF,6BACE,SAAC,KAAD,CAAgBe,MAAM,UAAUC,SAAS,YAAYC,UAAW,MAC/Dd,IAAW,SAACxC,EAAA,EAAD,IACX8B,IAAU,SAACD,EAAD,CAAMC,OAAQA,IACxBa,IAAS","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","moviesAPI.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","pages/CastPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledLoader = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 99;\n`;\n","import { TailSpin } from 'react-loader-spinner';\nimport { StyledLoader } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <StyledLoader>\n      <TailSpin\n        ariaLabel=\"loading-indicator\"\n        height=\"80\"\n        width=\"80\"\n        radius=\"10\"\n        color=\"green\"\n      />\n    </StyledLoader>\n  );\n};\n","import axios from 'axios';\n\nconst instance = axios.create({\n  method: 'get',\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '250f014fd6a936550e378176122f5d39',\n  },\n});\n\nexport const getPopularMovies = async () => {\n  const response = await instance('/trending/movie/day');\n  return response.data.results;\n};\n\nexport const getMovieById = async id => {\n  const response = await instance(`/movie/${id}`);\n  return response.data;\n};\n\nexport const getCast = async id => {\n  const response = await instance(`/movie/${id}/credits`);\n  return response.data.cast;\n};\n\nexport const getReviews = async id => {\n  const response = await instance(`/movie/${id}/reviews`);\n  return response.data.results;\n};\n\nexport const getSearchMovie = async query => {\n  const response = await instance(`/search/movie?query=${query}`);\n  return response.data.results;\n};\n","import styled from 'styled-components';\n\nexport const CastBox = styled.div`\n  max-width: 1400px;\n  margin: 0 auto;\n  padding-top: 50px;\n  padding-bottom: 50px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: -30px;\n  margin-left: -30px;\n  flex-wrap: wrap;\n`;\n\nexport const Item = styled.li`\n  flex-basis: calc(100% / 4 - 30px);\n  margin-top: 30px;\n  margin-left: 30px;\n  border-radius: 5px;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n  background-color: white;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n  transform: scale(1);\n  transition: all 250ms linear;\n  &:hover {\n    transform: scale(1.1);\n    transition: all 250ms linear;\n  }\n`;\n\nexport const Name = styled.p`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-top: 15px;\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  height: 450px;\n  overflow: hidden;\n`;\n\nexport const Character = styled.p`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-top: 15px;\n  padding-bottom: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { CastBox, List, Item, Img, Name, Character } from './Cast.styled';\n\nexport const Cast = ({ actors }) => {\n  return (\n    <CastBox>\n      <List>\n        {actors.map(({ id, name, profile_path, character }) => (\n          <Item key={id}>\n            <Img\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w300/${profile_path}`\n                  : 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/300px-No_image_available.svg.png'\n              }\n              alt={name}\n            />\n            <Name>{name}</Name>\n            <Character>{character}</Character>\n          </Item>\n        ))}\n      </List>\n    </CastBox>\n  );\n};\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    }).isRequired\n  ),\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Loader } from 'components/Loader';\nimport { getCast } from 'moviesAPI';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Cast } from 'components/Cast';\n\nconst CastPage = () => {\n  const { movieId } = useParams();\n  const [loading, setLoading] = useState(false);\n  const [actors, setActors] = useState(null);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    setLoading(true);\n    getCast(movieId)\n      .then(results => {\n        if (results.length === 0) {\n          return toast.error('Sorry, actors not found');\n        }\n        setActors(results);\n      })\n      .catch(error => setError(error.message))\n      .finally(() => setLoading(false));\n  }, [movieId]);\n\n  return (\n    <main>\n      <ToastContainer theme=\"colored\" position=\"top-right\" autoClose={3000} />\n      {loading && <Loader />}\n      {actors && <Cast actors={actors} />}\n      {error && <p>Something went wrong, please try again later!g</p>}\n    </main>\n  );\n};\n\nexport default CastPage;\n"],"names":["StyledLoader","styled","Loader","ariaLabel","height","width","radius","color","instance","axios","method","baseURL","params","api_key","getPopularMovies","response","data","results","getMovieById","id","getCast","cast","getReviews","getSearchMovie","query","CastBox","List","Item","Name","Img","Character","Cast","actors","map","name","profile_path","character","src","alt","movieId","useParams","useState","loading","setLoading","setActors","error","setError","useEffect","then","length","toast","catch","message","finally","theme","position","autoClose"],"sourceRoot":""}