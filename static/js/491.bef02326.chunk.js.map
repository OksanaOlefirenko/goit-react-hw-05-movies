{"version":3,"file":"static/js/491.bef02326.chunk.js","mappings":"gMAEaA,E,QAAeC,GAAAA,IAAH,4H,SCCZC,EAAS,WACpB,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,UAAU,oBACVC,OAAO,KACPC,MAAM,KACNC,OAAO,KACPC,MAAM,c,uLCXRC,EAAQC,EAAQ,MACTC,EAAU,mCACjBC,EAAW,+BAEJC,EAAgB,mCAAG,6FACxBC,EADwB,UACfF,EADe,uCACwBD,GADxB,SAEPF,EAAMM,IAAID,GAFH,cAExBE,EAFwB,yBAGvBA,EAASC,KAAKC,SAHS,2CAAH,qDAMhBC,EAAY,mCAAG,WAAMC,GAAN,gFACpBN,EADoB,UACXF,EADW,kBACOQ,EADP,oBACqBT,GADrB,SAEHF,EAAMM,IAAID,GAFP,cAEpBE,EAFoB,yBAGnBA,EAASC,MAHU,2CAAH,sDAMZI,EAAO,mCAAG,WAAMD,GAAN,gFACfN,EADe,UACNF,EADM,kBACYQ,EADZ,4BACkCT,GADlC,SAEEF,EAAMM,IAAID,GAFZ,cAEfE,EAFe,yBAGdA,EAASC,KAAKK,MAHA,2CAAH,sDAMPC,EAAU,mCAAG,WAAMH,GAAN,gFAClBN,EADkB,UACTF,EADS,kBACSQ,EADT,4BAC+BT,GAD/B,SAEDF,EAAMM,IAAID,GAFT,cAElBE,EAFkB,yBAGjBA,EAASC,KAAKC,SAHG,2CAAH,sDAMVM,EAAc,mCAAG,WAAMC,GAAN,gFACtBX,EADsB,UACbF,EADa,iCACoBD,EADpB,kBACqCc,GADrC,SAELhB,EAAMM,IAAID,GAFL,cAEtBE,EAFsB,yBAGrBA,EAASC,KAAKC,SAHO,2CAAH,uD,uMC1BdQ,EAAaxB,EAAAA,GAAAA,IAAH,0CAGVyB,EAAOzB,EAAAA,GAAAA,GAAH,uCAIJ0B,EAAO1B,EAAAA,GAAAA,GAAH,gDAIJ2B,EAAQ3B,EAAAA,GAAAA,GAAH,gD,SCVL4B,EAAU,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACxB,OACE,SAACL,EAAD,WACE,SAACC,EAAD,UACGI,EAAQC,KAAI,gBAAGZ,EAAH,EAAGA,GAAIa,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,OAAhB,OACX,UAACN,EAAD,YACE,SAACC,EAAD,UAAQK,KACR,uBAAID,MAFKb,WCARe,EAAc,WACzB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,UAAS,MAAvC,eAAOP,EAAP,KAAgBU,EAAhB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACEF,GAAW,GADb,mBAG0BjB,EAAAA,EAAAA,IAAWa,GAHrC,UAI2B,KADjBL,EAHV,QAIgBY,OAJhB,yCAKaC,EAAAA,GAAAA,MAAY,oDALzB,OAOIH,EAAWV,GAPf,kDASIa,EAAAA,GAAAA,MAAY,oBAThB,yBAWIJ,GAAW,GAXf,8EADc,uBAAC,WAAD,wBAedK,KACC,CAACT,KAGF,6BACE,SAAC,KAAD,CAAgBU,MAAM,UAAUC,SAAS,YAAYC,UAAW,MAC/DT,IAAW,SAACpC,EAAA,EAAD,IACX4B,IAAW,SAACD,EAAD,CAASC,QAASA","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","moviesAPI.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","pages/ReviewsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledLoader = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 99;\n`;\n","import { TailSpin } from 'react-loader-spinner';\nimport { StyledLoader } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <StyledLoader>\n      <TailSpin\n        ariaLabel=\"loading-indicator\"\n        height=\"80\"\n        width=\"80\"\n        radius=\"10\"\n        color=\"green\"\n      />\n    </StyledLoader>\n  );\n};\n","const axios = require('axios');\nexport const API_KEY = '250f014fd6a936550e378176122f5d39';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getPopularMovies = async () => {\n  const url = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`;\n  const response = await axios.get(url);\n  return response.data.results;\n};\n\nexport const getMovieById = async id => {\n  const url = `${BASE_URL}/movie/${id}?api_key=${API_KEY}`;\n  const response = await axios.get(url);\n  return response.data;\n};\n\nexport const getCast = async id => {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n  const response = await axios.get(url);\n  return response.data.cast;\n};\n\nexport const getReviews = async id => {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n  const response = await axios.get(url);\n  return response.data.results;\n};\n\nexport const getSearchMovie = async query => {\n  const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`;\n  const response = await axios.get(url);\n  return response.data.results;\n};\n","import styled from 'styled-components';\n\nexport const ReviewsBox = styled.div`\n  padding: 30px;\n`;\nexport const List = styled.ul`\n  padding: 0;\n`;\n\nexport const Item = styled.li`\n  margin-bottom: 40px;\n`;\n\nexport const Title = styled.h2`\n  margin-bottom: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { ReviewsBox, List, Item, Title } from './Reviews.styled';\n\nexport const Reviews = ({ reviews }) => {\n  return (\n    <ReviewsBox>\n      <List>\n        {reviews.map(({ id, content, author }) => (\n          <Item key={id}>\n            <Title>{author}</Title>\n            <p>{content}</p>\n          </Item>\n        ))}\n      </List>\n    </ReviewsBox>\n  );\n};\n\nReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Loader } from 'components/Loader';\nimport { getReviews } from 'moviesAPI';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Reviews } from 'components/Reviews';\n\nexport const ReviewsPage = () => {\n  const { movieId } = useParams();\n  const [loading, setLoading] = useState(false);\n  const [reviews, setReviews] = useState(null);\n\n  useEffect(() => {\n    async function fetchReviewsById() {\n      setLoading(true);\n      try {\n        const reviews = await getReviews(movieId);\n        if (reviews.length === 0) {\n          return toast.error(\"Sorry, We don't have any reviews for this movie\");\n        }\n        setReviews(reviews);\n      } catch (error) {\n        toast.error('Actors not found');\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchReviewsById();\n  }, [movieId]);\n\n  return (\n    <main>\n      <ToastContainer theme=\"colored\" position=\"top-right\" autoClose={3000} />\n      {loading && <Loader />}\n      {reviews && <Reviews reviews={reviews} />}\n    </main>\n  );\n};\n"],"names":["StyledLoader","styled","Loader","ariaLabel","height","width","radius","color","axios","require","API_KEY","BASE_URL","getPopularMovies","url","get","response","data","results","getMovieById","id","getCast","cast","getReviews","getSearchMovie","query","ReviewsBox","List","Item","Title","Reviews","reviews","map","content","author","ReviewsPage","movieId","useParams","useState","loading","setLoading","setReviews","useEffect","length","toast","fetchReviewsById","theme","position","autoClose"],"sourceRoot":""}