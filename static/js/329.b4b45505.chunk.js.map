{"version":3,"file":"static/js/329.b4b45505.chunk.js","mappings":"gMAEaA,E,QAAeC,GAAAA,IAAH,4H,SCCZC,EAAS,WACpB,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,UAAU,oBACVC,OAAO,KACPC,MAAM,KACNC,OAAO,KACPC,MAAM,c,uLCXRC,EAAQC,EAAQ,MACTC,EAAU,mCACjBC,EAAW,+BAEJC,EAAgB,mCAAG,6FACxBC,EADwB,UACfF,EADe,uCACwBD,GADxB,SAEPF,EAAMM,IAAID,GAFH,cAExBE,EAFwB,yBAGvBA,EAASC,KAAKC,SAHS,2CAAH,qDAMhBC,EAAY,mCAAG,WAAMC,GAAN,gFACpBN,EADoB,UACXF,EADW,kBACOQ,EADP,oBACqBT,GADrB,SAEHF,EAAMM,IAAID,GAFP,cAEpBE,EAFoB,yBAGnBA,EAASC,MAHU,2CAAH,sDAMZI,EAAO,mCAAG,WAAMD,GAAN,gFACfN,EADe,UACNF,EADM,kBACYQ,EADZ,4BACkCT,GADlC,SAEEF,EAAMM,IAAID,GAFZ,cAEfE,EAFe,yBAGdA,EAASC,KAAKK,MAHA,2CAAH,sDAMPC,EAAU,mCAAG,WAAMH,GAAN,gFAClBN,EADkB,UACTF,EADS,kBACSQ,EADT,4BAC+BT,GAD/B,SAEDF,EAAMM,IAAID,GAFT,cAElBE,EAFkB,yBAGjBA,EAASC,KAAKC,SAHG,2CAAH,sDAMVM,EAAc,mCAAG,WAAMC,GAAN,gFACtBX,EADsB,UACbF,EADa,iCACoBD,EADpB,kBACqCc,GADrC,SAELhB,EAAMM,IAAID,GAFL,cAEtBE,EAFsB,yBAGrBA,EAASC,KAAKC,SAHO,2CAAH,uD,wMC1BdQ,EAAUxB,EAAAA,GAAAA,IAAH,gHAOPyB,EAAOzB,EAAAA,GAAAA,GAAH,+JASJ0B,EAAO1B,EAAAA,GAAAA,GAAH,+ZAkBJ2B,EAAO3B,EAAAA,GAAAA,EAAH,oHAOJ4B,EAAM5B,EAAAA,GAAAA,IAAH,+EAMH6B,EAAY7B,EAAAA,GAAAA,EAAH,6I,SC9CT8B,EAAO,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrB,OACE,SAACP,EAAD,WACE,SAACC,EAAD,UACGM,EAAOC,KAAI,gBAAGd,EAAH,EAAGA,GAAIe,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACV,UAACT,EAAD,YACE,SAACE,EAAD,CACEQ,IACEF,EAAY,0CAC2BA,GACnC,oHAENG,IAAKJ,KAEP,SAACN,EAAD,UAAOM,KACP,SAACJ,EAAD,UAAYM,MAVHjB,WCARoB,EAAW,WACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,MAArC,eAAOV,EAAP,KAAea,EAAf,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACEF,GAAW,GADb,mBAGyBxB,EAAAA,EAAAA,IAAQoB,GAHjC,OAGUR,EAHV,OAIIa,EAAUb,GAJd,gDAMIe,EAAAA,GAAAA,MAAY,oBANhB,yBAQIH,GAAW,GARf,6EADc,uBAAC,WAAD,wBAYdI,KACC,CAACR,KAGF,6BACE,SAAC,KAAD,CAAgBS,MAAM,UAAUC,SAAS,YAAYC,UAAW,MAC/DR,IAAW,SAACzC,EAAA,EAAD,IACX8B,IAAU,SAACD,EAAD,CAAMC,OAAQA","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","moviesAPI.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","pages/CastPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledLoader = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 99;\n`;\n","import { TailSpin } from 'react-loader-spinner';\nimport { StyledLoader } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <StyledLoader>\n      <TailSpin\n        ariaLabel=\"loading-indicator\"\n        height=\"80\"\n        width=\"80\"\n        radius=\"10\"\n        color=\"green\"\n      />\n    </StyledLoader>\n  );\n};\n","const axios = require('axios');\nexport const API_KEY = '250f014fd6a936550e378176122f5d39';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getPopularMovies = async () => {\n  const url = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`;\n  const response = await axios.get(url);\n  return response.data.results;\n};\n\nexport const getMovieById = async id => {\n  const url = `${BASE_URL}/movie/${id}?api_key=${API_KEY}`;\n  const response = await axios.get(url);\n  return response.data;\n};\n\nexport const getCast = async id => {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n  const response = await axios.get(url);\n  return response.data.cast;\n};\n\nexport const getReviews = async id => {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n  const response = await axios.get(url);\n  return response.data.results;\n};\n\nexport const getSearchMovie = async query => {\n  const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`;\n  const response = await axios.get(url);\n  return response.data.results;\n};\n","import styled from 'styled-components';\n\nexport const CastBox = styled.div`\n  max-width: 1400px;\n  margin: 0 auto;\n  padding-top: 50px;\n  padding-bottom: 50px;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: -30px;\n  margin-left: -30px;\n  flex-wrap: wrap;\n`;\n\nexport const Item = styled.li`\n  flex-basis: calc(100% / 4 - 30px);\n  margin-top: 30px;\n  margin-left: 30px;\n  border-radius: 5px;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n  background-color: white;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n  transform: scale(1);\n  transition: all 250ms linear;\n  &:hover {\n    transform: scale(1.1);\n    transition: all 250ms linear;\n  }\n`;\n\nexport const Name = styled.p`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-top: 15px;\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  height: 450px;\n  overflow: hidden;\n`;\n\nexport const Character = styled.p`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-top: 15px;\n  padding-bottom: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { CastBox, List, Item, Img, Name, Character } from './Cast.styled';\n\nexport const Cast = ({ actors }) => {\n  return (\n    <CastBox>\n      <List>\n        {actors.map(({ id, name, profile_path, character }) => (\n          <Item key={id}>\n            <Img\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w300/${profile_path}`\n                  : 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/300px-No_image_available.svg.png'\n              }\n              alt={name}\n            />\n            <Name>{name}</Name>\n            <Character>{character}</Character>\n          </Item>\n        ))}\n      </List>\n    </CastBox>\n  );\n};\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    }).isRequired\n  ),\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Loader } from 'components/Loader';\nimport { getCast } from 'moviesAPI';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Cast } from 'components/Cast';\n\nexport const CastPage = () => {\n  const { movieId } = useParams();\n  const [loading, setLoading] = useState(false);\n  const [actors, setActors] = useState(null);\n\n  useEffect(() => {\n    async function fetchCastById() {\n      setLoading(true);\n      try {\n        const actors = await getCast(movieId);\n        setActors(actors);\n      } catch (error) {\n        toast.error('Actors not found');\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchCastById();\n  }, [movieId]);\n\n  return (\n    <main>\n      <ToastContainer theme=\"colored\" position=\"top-right\" autoClose={3000} />\n      {loading && <Loader />}\n      {actors && <Cast actors={actors} />}\n    </main>\n  );\n};\n"],"names":["StyledLoader","styled","Loader","ariaLabel","height","width","radius","color","axios","require","API_KEY","BASE_URL","getPopularMovies","url","get","response","data","results","getMovieById","id","getCast","cast","getReviews","getSearchMovie","query","CastBox","List","Item","Name","Img","Character","Cast","actors","map","name","profile_path","character","src","alt","CastPage","movieId","useParams","useState","loading","setLoading","setActors","useEffect","toast","fetchCastById","theme","position","autoClose"],"sourceRoot":""}