{"version":3,"file":"static/js/879.d9b0b2f1.chunk.js","mappings":"gMAEaA,E,QAAeC,GAAAA,IAAH,4H,SCCZC,EAAS,WACpB,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CACEG,UAAU,oBACVC,OAAO,KACPC,MAAM,KACNC,OAAO,KACPC,MAAM,c,wFCTDC,EAAYP,EAAAA,GAAAA,IAAH,iEAKTQ,EAAOR,EAAAA,GAAAA,GAAH,8M,mBCJJS,GAAOT,EAAAA,EAAAA,IAAOU,EAAAA,GAAPV,CAAH,kDAIJW,EAAOX,EAAAA,GAAAA,GAAH,oXAiBJY,EAASZ,EAAAA,GAAAA,IAAH,0DAKNa,EAAQb,EAAAA,GAAAA,EAAH,wJ,SCzBLc,EAAgB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACtBC,EAA2BD,EAA3BC,GAAIC,EAAuBF,EAAvBE,YAAaC,EAAUH,EAAVG,MACnBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAACX,EAAD,CAAMY,GAAE,kBAAaL,GAAMM,MAAO,CAAEC,KAAMJ,GAA1C,UACE,UAACR,EAAD,YACE,SAACC,EAAD,CACEY,IACEP,EAAW,0CAC4BA,GACnC,oHAENQ,IAAKP,KAEP,SAACL,EAAD,UAAQK,UCdHQ,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC3B,OACE,SAACpB,EAAD,WACE,SAACC,EAAD,UACGmB,EAAOC,KAAI,SAAAb,GAAK,OACf,SAACD,EAAD,CAA8BC,MAAOA,GAAjBA,EAAMC,a,iMCP9Ba,E,MAAWC,GAAAA,OAAa,CAC5BC,OAAQ,MACRC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAgB,mCAAG,oGACPN,EAAS,uBADF,cACxBO,EADwB,yBAEvBA,EAASC,KAAKC,SAFS,2CAAH,qDAKhBC,EAAY,mCAAG,WAAMvB,GAAN,uFACHa,EAAS,UAAD,OAAWb,IADhB,cACpBoB,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKZG,EAAO,mCAAG,WAAMxB,GAAN,uFACEa,EAAS,UAAD,OAAWb,EAAX,aADV,cACfoB,EADe,yBAEdA,EAASC,KAAKI,MAFA,2CAAH,sDAKPC,EAAU,mCAAG,WAAM1B,GAAN,uFACDa,EAAS,UAAD,OAAWb,EAAX,aADP,cAClBoB,EADkB,yBAEjBA,EAASC,KAAKC,SAFG,2CAAH,sDAKVK,EAAc,mCAAG,WAAMC,GAAN,uFACLf,EAAS,uBAAD,OAAwBe,IAD3B,cACtBR,EADsB,yBAErBA,EAASC,KAAKC,SAFO,2CAAH,uD,mLC5BdzB,E,QAAQb,GAAAA,GAAH,mF,SCqClB,EA/Ba,WACX,OAA4B6C,EAAAA,EAAAA,UAAS,MAArC,eAAOlB,EAAP,KAAemB,EAAf,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACEH,GAAW,GADb,mBAGwBb,EAAAA,EAAAA,MAHxB,OAGUiB,EAHV,OAIIN,EAAUM,GAJd,gDAMIF,EAAS,EAAD,IANZ,yBAQIF,GAAW,GARf,6EADc,uBAAC,WAAD,wBAYdK,KACC,KAGD,6BACE,SAAC,KAAD,CAAgBC,MAAM,UAAUC,SAAS,YAAYC,UAAW,OAChE,SAAC3C,EAAD,6BACCoC,GAASQ,EAAAA,GAAAA,MAAA,wCAA6CR,EAAMS,UAC5DX,IAAW,SAAC9C,EAAA,EAAD,IACX0B,IAAU,SAACD,EAAA,EAAD,CAAYC,OAAQA","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/MoviesList/MoviesList.styled.js","components/MovieListItem/MovieListItem.styled.js","components/MovieListItem/MovieListItem.jsx","components/MoviesList/MoviesList.jsx","moviesAPI.js","pages/HomePage/Home.styled.js","pages/HomePage/Home.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledLoader = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 99;\n`;\n","import { TailSpin } from 'react-loader-spinner';\nimport { StyledLoader } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <StyledLoader>\n      <TailSpin\n        ariaLabel=\"loading-indicator\"\n        height=\"80\"\n        width=\"80\"\n        radius=\"10\"\n        color=\"green\"\n      />\n    </StyledLoader>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: 1400px;\n  margin: 0 auto;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: -30px;\n  margin-left: -30px;\n  flex-wrap: wrap;\n  padding-top: 40px;\n  padding-bottom: 40px;\n`;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Link = styled(NavLink)`\n  text-decoration: none;\n`;\n\nexport const Item = styled.li`\n  width: 300px;\n  flex-basis: calc(100% / 4 - 30px);\n  margin-top: 30px;\n  margin-left: 30px;\n  border-radius: 5px;\n  overflow: hidden;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n  cursor: pointer;\n  transform: scale(1);\n  transition: all 250ms linear;\n  &:hover {\n    transform: scale(1.1);\n    transition: all 250ms linear;\n  }\n`;\n\nexport const Poster = styled.img`\n  width: 100%;\n  height: 400px;\n`;\n\nexport const Title = styled.p`\n  font-weight: 500;\n  padding: 10px 20px;\n  color: #000;\n  white-space: nowrap;\n  overflow: hidden;\n  text-align: center;\n`;\n","import { useLocation } from 'react-router-dom';\nimport { Link, Item, Poster, Title } from './MovieListItem.styled';\nimport PropTypes from 'prop-types';\n\nexport const MovieListItem = ({ movie }) => {\n  const { id, poster_path, title } = movie;\n  const location = useLocation();\n  return (\n    <Link to={`/movies/${id}`} state={{ from: location }}>\n      <Item>\n        <Poster\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w300/${poster_path}`\n              : 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/300px-No_image_available.svg.png'\n          }\n          alt={title}\n        />\n        <Title>{title}</Title>\n      </Item>\n    </Link>\n  );\n};\n\nMovieListItem.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    poster_path: PropTypes.string,\n    title: PropTypes.string,\n  }).isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { Container, List } from './MoviesList.styled';\nimport { MovieListItem } from 'components/MovieListItem';\n\nexport const MoviesList = ({ movies }) => {\n  return (\n    <Container>\n      <List>\n        {movies.map(movie => (\n          <MovieListItem key={movie.id} movie={movie} />\n        ))}\n      </List>\n    </Container>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n","import axios from 'axios';\n\nconst instance = axios.create({\n  method: 'get',\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '250f014fd6a936550e378176122f5d39',\n  },\n});\n\nexport const getPopularMovies = async () => {\n  const response = await instance('/trending/movie/day');\n  return response.data.results;\n};\n\nexport const getMovieById = async id => {\n  const response = await instance(`/movie/${id}`);\n  return response.data;\n};\n\nexport const getCast = async id => {\n  const response = await instance(`/movie/${id}/credits`);\n  return response.data.cast;\n};\n\nexport const getReviews = async id => {\n  const response = await instance(`/movie/${id}/reviews`);\n  return response.data.results;\n};\n\nexport const getSearchMovie = async query => {\n  const response = await instance(`/search/movie?query=${query}`);\n  return response.data.results;\n};\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  text-align: center;\n  color: red;\n  margin-top: 30px;\n`;\n","import { MoviesList } from 'components/MoviesList';\nimport { Loader } from 'components/Loader';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { getPopularMovies } from '../../moviesAPI';\nimport { useState, useEffect } from 'react';\nimport { Title } from './Home.styled';\n\nconst Home = () => {\n  const [movies, setMovies] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function fetchMovies() {\n      setLoading(true);\n      try {\n        const items = await getPopularMovies();\n        setMovies(items);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchMovies();\n  }, []);\n\n  return (\n    <main>\n      <ToastContainer theme=\"colored\" position=\"top-right\" autoClose={3000} />\n      <Title>Trending today</Title>\n      {error && toast.error(`Whoops, something went wrong: ${error.message}`)}\n      {loading && <Loader />}\n      {movies && <MoviesList movies={movies} />}\n    </main>\n  );\n};\n\nexport default Home;\n"],"names":["StyledLoader","styled","Loader","ariaLabel","height","width","radius","color","Container","List","Link","NavLink","Item","Poster","Title","MovieListItem","movie","id","poster_path","title","location","useLocation","to","state","from","src","alt","MoviesList","movies","map","instance","axios","method","baseURL","params","api_key","getPopularMovies","response","data","results","getMovieById","getCast","cast","getReviews","getSearchMovie","query","useState","setMovies","loading","setLoading","error","setError","useEffect","items","fetchMovies","theme","position","autoClose","toast","message"],"sourceRoot":""}